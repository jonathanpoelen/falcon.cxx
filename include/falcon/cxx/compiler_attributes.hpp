/* The MIT License (MIT)

Copyright (c) 2016 jonathan poelen

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

/**
* \author    Jonathan Poelen <jonathan.poelen+falcon@gmail.com>
* \version   0.1
* \brief     c++11, 14, 17 compiler attributes
*/

// Non-standards Attributes
//@{

// http://clang.llvm.org/docs/AttributeReference.html
// https://gcc.gnu.org/onlinedocs/gcc/Common-Variable-Attributes.html#Common-Variable-Attributes
// https://gcc.gnu.org/onlinedocs/gcc/Common-Function-Attributes.html
// https://gcc.gnu.org/onlinedocs/gcc/C_002b_002b-Extensions.html#C_002b_002b-Extensions

#if defined(__clang__)
# define FALCON_CXX_ANNOTATION_ATTRIBUTE_GCC_CLANG__(x)     __attribute__((x))
# define FALCON_CXX_ANNOTATION_ATTRIBUTE_GCC__(x)           // no-op
# define FALCON_CXX_ANNOTATION_ATTRIBUTE_CLANG__(x)         __attribute__((x))
# define FALCON_CXX_ANNOTATION_ATTRIBUTE_CLANG_MSVC__(x)    __attribute__((x))
# define FALCON_CXX_ANNOTATION_ATTRIBUTE__(x)               __attribute__((x))
#elif defined(__GNUC__)
# define FALCON_CXX_ANNOTATION_ATTRIBUTE_GCC_CLANG__(x)     __attribute__((x))
# define FALCON_CXX_ANNOTATION_ATTRIBUTE_CLANG__(x)         // no-op
# define FALCON_CXX_ANNOTATION_ATTRIBUTE_GCC__(x)           __attribute__((x))
# define FALCON_CXX_ANNOTATION_ATTRIBUTE_CLANG_MSVC__(x)    // no-op
# define FALCON_CXX_ANNOTATION_ATTRIBUTE__(x)               __attribute__((x))
#elif defined(_MSC_VER)
# define FALCON_CXX_ANNOTATION_ATTRIBUTE_GCC_CLANG__(x)     // no-op
# define FALCON_CXX_ANNOTATION_ATTRIBUTE_CLANG__(x)         // no-op
# define FALCON_CXX_ANNOTATION_ATTRIBUTE_GCC__(x)           // no-op
# define FALCON_CXX_ANNOTATION_ATTRIBUTE_CLANG_MSVC__(x)    __declspec(x)
# define FALCON_CXX_ANNOTATION_ATTRIBUTE__(x)               __declspec(x)
#else
# define FALCON_CXX_ANNOTATION_ATTRIBUTE_GCC_CLANG__(x)     // no-op
# define FALCON_CXX_ANNOTATION_ATTRIBUTE_CLANG__(x)         // no-op
# define FALCON_CXX_ANNOTATION_ATTRIBUTE_GCC__(x)           // no-op
# define FALCON_CXX_ANNOTATION_ATTRIBUTE_CLANG_MSVC__(x)    // no-op
# define FALCON_CXX_ANNOTATION_ATTRIBUTE__(x)               // no-op
#endif


#define FALCON_CXX_ATTRIBUTE_ASSUME_ALIGNED(...) \
  FALCON_CXX_ANNOTATION_ATTRIBUTE_GCC_CLANG__(assume_aligned(__VA_ARGS__))

#define FALCON_CXX_ATTRIBUTE_AVAILABILITY(...) \
  FALCON_CXX_ANNOTATION_ATTRIBUTE_GCC_CLANG__(availability(__VA_ARGS__))

#define FALCON_CXX_ATTRIBUTE_CONVERGENT(...) \
  FALCON_CXX_ANNOTATION_ATTRIBUTE_GCC_CLANG__(convergent(__VA_ARGS__))

#define FALCON_CXX_ATTRIBUTE_DISABLE_TAIL_CALLS(...) \
  FALCON_CXX_ANNOTATION_ATTRIBUTE_GCC_CLANG__(disable_tail_calls(__VA_ARGS__))

#define FALCON_CXX_ATTRIBUTE_FLATTEN \
  FALCON_CXX_ANNOTATION_ATTRIBUTE_GCC_CLANG__(flatten)

#define FALCON_CXX_ATTRIBUTE_FORMAT(...) \
  FALCON_CXX_ANNOTATION_ATTRIBUTE_GCC_CLANG__(__format__(__VA_ARGS__))

#define FALCON_CXX_ATTRIBUTE_IFUNC \
  FALCON_CXX_ANNOTATION_ATTRIBUTE_GCC_CLANG__(ifunc("resolver"))

#define FALCON_CXX_ATTRIBUTE_INTERNAL_LINKAGE \
  FALCON_CXX_ANNOTATION_ATTRIBUTE_GCC_CLANG__(internal_linkage)

#define FALCON_CXX_ATTRIBUTE_INTERRUPT(arg) \
  FALCON_CXX_ANNOTATION_ATTRIBUTE_GCC_CLANG__(interrupt(arg))

#define FALCON_CXX_ATTRIBUTE_NOALIAS \
  FALCON_CXX_ANNOTATION_ATTRIBUTE_MSGCC_CLANG__(noalias)

#define FALCON_CXX_ATTRIBUTE_NODUPLICATE \
  FALCON_CXX_ANNOTATION_ATTRIBUTE_GCC_CLANG__(noduplicate)

#define FALCON_CXX_ATTRIBUTE_NO_SANITIZE_ADDRESS \
  FALCON_CXX_ANNOTATION_ATTRIBUTE_GCC_CLANG__(no_sanitize_address)

#define FALCON_CXX_ATTRIBUTE_NO_SANITIZE_THREAD \
  FALCON_CXX_ANNOTATION_ATTRIBUTE_GCC_CLANG__(no_sanitize_thread)

#define FALCON_CXX_ATTRIBUTE_NO_SANITIZE_MEMORY \
  FALCON_CXX_ANNOTATION_ATTRIBUTE_GCC_CLANG__(no_sanitize_memory)

#define FALCON_CXX_ATTRIBUTE_NO_SPLIT_STACK \
  FALCON_CXX_ANNOTATION_ATTRIBUTE_GCC_CLANG__(no_split_stack)

#define FALCON_CXX_ATTRIBUTE_NOT_TAIL_CALLED \
  FALCON_CXX_ANNOTATION_ATTRIBUTE_GCC_CLANG__(not_tail_called)

#define FALCON_CXX_ATTRIBUTE_NO_STACK_LIMIT \
  FALCON_CXX_ANNOTATION_ATTRIBUTE_GCC__(no_stack_limit)

#define FALCON_CXX_ATTRIBUTE_OPTNONE \
  FALCON_CXX_ANNOTATION_ATTRIBUTE_GCC_CLANG__(optnone)

#define FALCON_CXX_ATTRIBUTE_KERNEL \
  FALCON_CXX_ANNOTATION_ATTRIBUTE_GCC_CLANG__(kernel)

#define FALCON_CXX_ATTRIBUTE_TARGET(...) \
  FALCON_CXX_ANNOTATION_ATTRIBUTE_GCC_CLANG__(target(__VA_ARGS__))

#define FALCON_CXX_ATTRIBUTE_XRAY_ALWAYS_INSTRUMENT \
  FALCON_CXX_ANNOTATION_ATTRIBUTE_GCC_CLANG__(xray_always_instrument)

#define FALCON_CXX_ATTRIBUTE_DLLEXPORT \
  FALCON_CXX_ANNOTATION_ATTRIBUTE__(dllexport)

#define FALCON_CXX_ATTRIBUTE_DLLIMPORT \
  FALCON_CXX_ANNOTATION_ATTRIBUTE__(dllimport)

#define FALCON_CXX_ATTRIBUTE_NODEBUG \
  FALCON_CXX_ANNOTATION_ATTRIBUTE_GCC_CLANG__(nodebug)

#define FALCON_CXX_ATTRIBUTE_NOSVM \
  FALCON_CXX_ANNOTATION_ATTRIBUTE_GCC_CLANG__(nosvm)

#define FALCON_CXX_ATTRIBUTE_REQUIRE_CONSTANT_INITIALIZATION \
  FALCON_CXX_ANNOTATION_ATTRIBUTE_CLANG__(require_constant_initialization)

#define FALCON_CXX_ATTRIBUTE_SECTION \
  FALCON_CXX_ANNOTATION_ATTRIBUTE__(section)

#define FALCON_CXX_ATTRIBUTE_TLS_MODEL(model) \
  FALCON_CXX_ANNOTATION_ATTRIBUTE_GCC_CLANG__(tls_model(model))

#define FALCON_CXX_ATTRIBUTE_THREAD \
  FALCON_CXX_ANNOTATION_ATTRIBUTE_CLANG_MSVC__(thread)

#define FALCON_CXX_ATTRIBUTE_ALIGN_VALUE(n) \
  FALCON_CXX_ANNOTATION_ATTRIBUTE_GCC_CLANG__(align_value(n))

#define FALCON_CXX_ATTRIBUTE_FLAG_ENUM \
  FALCON_CXX_ANNOTATION_ATTRIBUTE_GCC_CLANG__(flag_enum)

#define FALCON_CXX_ATTRIBUTE_LTO_VISIBILITY_PUBLIC \
  FALCON_CXX_ANNOTATION_ATTRIBUTE_CLANG__(lto_visibility_public)

#define FALCON_CXX_ATTRIBUTE_LAYOUT_VERSION \
  FALCON_CXX_ANNOTATION_ATTRIBUTE_CLANG_MSVC__(layout_version)

#define FALCON_CXX_ATTRIBUTE_NOVTABLE \
  FALCON_CXX_ANNOTATION_ATTRIBUTE_CLANG_MSVC__(novtable)

#define FALCON_CXX_ATTRIBUTE_OPENCL_UNROLL_HINT \
  FALCON_CXX_ANNOTATION_ATTRIBUTE_GCC_CLANG__(opencl_unroll_hint)

#define FALCON_CXX_ATTRIBUTE_NONNULL \
  FALCON_CXX_ANNOTATION_ATTRIBUTE_CLANG__(nonnull)

#define FALCON_CXX_ATTRIBUTE_RETURNS_NONNULL \
  FALCON_CXX_ANNOTATION_ATTRIBUTE_GCC_CLANG__(returns_nonnull)

#define FALCON_CXX_ATTRIBUTE_ALWAYS_INLINE \
  FALCON_CXX_ANNOTATION_ATTRIBUTE_GCC_CLANG__(always_inline)


// http://clang.llvm.org/docs/ThreadSafetyAnalysis.html
//@{
#define FALCON_CXX_ATTRIBUTE_CAPABILITY(x) \
  FALCON_CXX_ANNOTATION_ATTRIBUTE_CLANG__(capability(x))

#define FALCON_CXX_ATTRIBUTE_SCOPED_CAPABILITY \
  FALCON_CXX_ANNOTATION_ATTRIBUTE_CLANG__(scoped_lockable)

#define FALCON_CXX_ATTRIBUTE_GUARDED_BY(x) \
  FALCON_CXX_ANNOTATION_ATTRIBUTE_CLANG__(guarded_by(x))

#define FALCON_CXX_ATTRIBUTE_PT_GUARDED_BY(x) \
  FALCON_CXX_ANNOTATION_ATTRIBUTE_CLANG__(pt_guarded_by(x))

#define FALCON_CXX_ATTRIBUTE_ACQUIRED_BEFORE(...) \
  FALCON_CXX_ANNOTATION_ATTRIBUTE_CLANG__(acquired_before(__VA_ARGS__))

#define FALCON_CXX_ATTRIBUTE_ACQUIRED_AFTER(...) \
  FALCON_CXX_ANNOTATION_ATTRIBUTE_CLANG__(acquired_after(__VA_ARGS__))

#define FALCON_CXX_ATTRIBUTE_REQUIRES(...) \
  FALCON_CXX_ANNOTATION_ATTRIBUTE_CLANG__(requires_capability(__VA_ARGS__))

#define FALCON_CXX_ATTRIBUTE_REQUIRES_SHARED(...) \
  FALCON_CXX_ANNOTATION_ATTRIBUTE_CLANG__(requires_shared_capability(__VA_ARGS__))

#define FALCON_CXX_ATTRIBUTE_ACQUIRE(...) \
  FALCON_CXX_ANNOTATION_ATTRIBUTE_CLANG__(acquire_capability(__VA_ARGS__))

#define FALCON_CXX_ATTRIBUTE_ACQUIRE_SHARED(...) \
  FALCON_CXX_ANNOTATION_ATTRIBUTE_CLANG__(acquire_shared_capability(__VA_ARGS__))

#define FALCON_CXX_ATTRIBUTE_RELEASE(...) \
  FALCON_CXX_ANNOTATION_ATTRIBUTE_CLANG__(release_capability(__VA_ARGS__))

#define FALCON_CXX_ATTRIBUTE_RELEASE_SHARED(...) \
  FALCON_CXX_ANNOTATION_ATTRIBUTE_CLANG__(release_shared_capability(__VA_ARGS__))

#define FALCON_CXX_ATTRIBUTE_TRY_ACQUIRE(...) \
  FALCON_CXX_ANNOTATION_ATTRIBUTE_CLANG__(try_acquire_capability(__VA_ARGS__))

#define FALCON_CXX_ATTRIBUTE_TRY_ACQUIRE_SHARED(...) \
  FALCON_CXX_ANNOTATION_ATTRIBUTE_CLANG__(try_acquire_shared_capability(__VA_ARGS__))

#define FALCON_CXX_ATTRIBUTE_EXCLUDES(...) \
  FALCON_CXX_ANNOTATION_ATTRIBUTE_CLANG__(locks_excluded(__VA_ARGS__))

#define FALCON_CXX_ATTRIBUTE_ASSERT_CAPABILITY(x) \
  FALCON_CXX_ANNOTATION_ATTRIBUTE_CLANG__(assert_capability(x))

#define FALCON_CXX_ATTRIBUTE_ASSERT_SHARED_CAPABILITY(x) \
  FALCON_CXX_ANNOTATION_ATTRIBUTE_CLANG__(assert_shared_capability(x))

#define FALCON_CXX_ATTRIBUTE_RETURN_CAPABILITY(x) \
  FALCON_CXX_ANNOTATION_ATTRIBUTE_CLANG__(lock_returned(x))

#define FALCON_CXX_ATTRIBUTE_NO_THREAD_SAFETY_ANALYSIS \
  FALCON_CXX_ANNOTATION_ATTRIBUTE_CLANG__(no_thread_safety_analysis)
//@}

//@}
